(module
 (testsuite)

 (import (builtins))
 (import (deviserlib))
 (export test testexp)

 (defmacro testexp (test expression expected-result)
   (print (list test expression expected-result)) (newline)
   (quasiquote (if ((unquote test) (unquote expression) (unquote expected-result))
                   (quote t)
                 (begin (print (quote (unquote expression)))
                        (print " => ")
                        (print (unquote expression))
                        (print "  FAIL\n")))))

 (defun testadd ()
   (all
    (testexp eqv (+ 1 1) 2)
    (testexp eqv (+ 2 3) 5)
    (testexp eqv (+ 5 10) 15)
    (testexp eqv (+ 0 1) 1)))

 (defun testsub ()
   (all
    (testexp eqv (- 1 1) 0)
    (testexp eqv (- 10 6) 4)
    (testexp eqv (- 5 10) (- 5))
    (testexp eqv (- 2 1) 1)))

 (defun testmul ()
   (all
    (testexp eqv (* 1 1) 1)
    (testexp eqv (* 1 0) 0)
    (testexp eqv (* 0 0) 0)
    (testexp eqv (* 5 5) 25)
    (testexp eqv (* 1 2) 2)
    (testexp eqv (* 2 1) 2)))

 (defun testdiv ()
   (all
    (testexp eqv (/ 1 1) 1)
    (testexp eqv (/ 2 1) 2)
    (testexp eqv (/ 20 5) 4)
    (testexp eqv (/ 5) 5)))

 (defun testlist ()
   (all
    (testexp equal (list) (quote ()))
    (testexp equal (list 1) (quote (1)))
    (testexp equal (list (quote a) (quote b)) (quote (a b)))
    (testexp equal (list 1 (quote a)) (quote (1 a)))))

 (defun test-string-append ()
   (all
    (testexp equal (string-append "asdf" "1234") "asdf1234")
    (testexp equal (string-append "" "asdf") "asdf")
    (testexp equal (string-append "asdf" "") "asdf")))

 (defun testlambda ()
   (all
    (testexp eq ((lambda () (quote t))) (quote t))
    (testexp eq ((lambda (a) a) (quote t)) (quote t))))

 (defun testeq ()
   (all
    (testexp eq (eq (quote t) (quote t)) (quote t))
    (testexp eq (eq (quote t) 2) (quote ()))))

 (defun testeqv ()
   (all
    (testexp eq (eqv 1 1) (quote t))
    (testexp eq (eqv 1 2) (quote ()))))

 (defun testequal ()
   (all
    (testexp eq (equal (quote (1)) (quote (1))) (quote t))
    (testexp eq (equal (quote (1)) (quote (2))) (quote ()))))

 (defun testif ()
   (all
    (testexp eqv (if (quote t) 1 0) 1)
    (testexp eqv (if (quote ()) 1 0) 0)
    (testexp eq (if (quote ()) 1) (quote ()))))

 (defun testcons ()
   (testexp equal (cons 1 (quote ())) (quote (1))))

 (defun test-append ()
   (all
    (testexp equal (append nil) nil)
    (testexp equal (append (list 1 2 3) (list 4 5 6)) (list 1 2 3 4 5 6))
    (testexp equal (append (list 1) (list 2) (list 3)) (list 1 2 3))
    (testexp equal (append (list 1) nil (list 3) nil) (list 1 3))
    (testexp equal (append nil nil nil nil nil nil nil) nil)))

 (defun test-let* ()
   (all
    (testexp eq (let* (x) x) nil)
    (testexp eqv (let* ((x 1)) x) 1)
    (testexp eq (let* ((x (quote y))) (quote y)) (quote y))
    (testexp eqv (let* ((x 1) (y 2)) y) 2)))

 (defun test-cond ()
   (all
    (testexp eqv (cond (t 1) (t 2)) 1)
    (testexp eq (cond (nil 1) (nil 2)) nil)
    (testexp eqv (cond (nil 1) (t 2)) 2)))

 (defun test-quasiquote ()
   (all
    (testexp equal (quasiquote x) (quote x))
    (testexp equal (quasiquote (x y)) (quote (x y)))
    (testexp equal (let* ((x 1)) (quasiquote ((unquote x)))) (quote (1)))
    (testexp equal (let* ((x (list 1)))
                     (quasiquote ((unquote-splice x))))
             (list 1))
    (testexp equal (let* ((x 1) (y (list 2 3)))
                     (quasiquote (1 2 (unquote x) x y (unquote-splice y) (unquote y))))
             (list 1 2 1 (quote x) (quote y) 2 3 (list 2 3)))))

 (defun test-macro-expand-1 ()
   (all
    (testexp equal (macro-expand-1 (quote x)) (quote x))
    (testexp equal (macro-expand-1 (quote nil)) (quote nil))
    (testexp equal (macro-expand-1 483) 483)
    (testexp equal (macro-expand-1 (list 1 2 3 4)) (quote (1 2 3 4)))
    (testexp equal (macro-expand-1 (quote (and 1 2 3))) (quote (if 1 (and 2 3))))))

 (defun text-macro-expand-all ()
   (all
    (testexp equal (macro-expand-all (quote x)) (quote x))
    (testexp equal (macro-expand-all (quote nil)) (quote nil))
    (testexp equal (macro-expand-all 13983) 13983)
    (testexp equal (macro-expand-all (list 1 2 3 4)) (quote (1 2 3 4)))
    (testexp equal (macro-expand-all (quote (and 1 2 3))) (quote (if 1 (and 2 3))))))

 (defun test ()
   (all
    (testadd)
    (testsub)
    (testmul)
    (testdiv)
    (test-string-append)
    (testlist)
    (testlambda)
    (testeq)
    (testeqv)
    (testequal)
    (testif)
    (testcons)
    (test-append)
    (test-let*)
    (test-cond)
    (test-quasiquote)
    (test-macro-expand-1))))
