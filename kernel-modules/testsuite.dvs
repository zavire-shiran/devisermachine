(module
 (testsuite)

 (import (builtins))
 (import (deviserlib))
 (export test)

 (defmacro testexp (test expression expected-result)
   (print (list test expression expected-result)) (newline)
   (list (quote if)
         (list test expression expected-result)
         (quote (quote t))
         (list (quote begin)
               (list (quote print) (list (quote quote) expression))
               (list (quote print) " => ")
               (list (quote print) expression)
               (list (quote print) "   FAIL\n"))))

 (defun testadd ()
   (all
    (testexp eqv (+ 1 1) 2)
    (testexp eqv (+ 2 3) 5)
    (testexp eqv (+ 5 10) 15)
    (testexp eqv (+ 0 1) 1)))

 (defun testsub ()
   (all
    (testexp eqv (- 1 1) 0)
    (testexp eqv (- 10 6) 4)
    (testexp eqv (- 5 10) (- 5))
    (testexp eqv (- 2 1) 1)))

 (defun testmul ()
   (all
    (testexp eqv (* 1 1) 1)
    (testexp eqv (* 1 0) 0)
    (testexp eqv (* 0 0) 0)
    (testexp eqv (* 5 5) 25)
    (testexp eqv (* 1 2) 2)
    (testexp eqv (* 2 1) 2)))

 (defun testdiv ()
   (all
    (testexp eqv (/ 1 1) 1)
    (testexp eqv (/ 2 1) 2)
    (testexp eqv (/ 20 5) 4)
    (testexp eqv (/ 5) 5)))

 (defun testlist ()
   (all
    (testexp equal (list) (quote ()))
    (testexp equal (list 1) (quote (1)))
    (testexp equal (list (quote a) (quote b)) (quote (a b)))
    (testexp equal (list 1 (quote a)) (quote (1 a)))))

 (defun testappend ()
   (all
    (testexp equal (append "asdf" "1234") "asdf1234")
    (testexp equal (append "" "asdf") "asdf")
    (testexp equal (append "asdf" "") "asdf")))

 (defun testlambda ()
   (all
    (testexp eq ((lambda () (quote t))) (quote t))
    (testexp eq ((lambda (a) a) (quote t)) (quote t))))

 (defun testeq ()
   (all
    (testexp eq (eq (quote t) (quote t)) (quote t))
    (testexp eq (eq (quote t) 2) (quote ()))))

 (defun testeqv ()
   (all
    (testexp eq (eqv 1 1) (quote t))
    (testexp eq (eqv 1 2) (quote ()))))

 (defun testequal ()
   (all
    (testexp eq (equal (quote (1)) (quote (1))) (quote t))
    (testexp eq (equal (quote (1)) (quote (2))) (quote ()))))

 (defun testif ()
   (all
    (testexp eqv (if (quote t) 1 0) 1)
    (testexp eqv (if (quote ()) 1 0) 0)
    (testexp eq (if (quote ()) 1) (quote ()))))

 (defun testcons ()
   (testexp equal (cons 1 (quote ())) (quote (1))))

 (defun test ()
   (all
    (testadd)
    (testsub)
    (testmul)
    (testdiv)
    (testappend)
    (testlist)
    (testlambda)
    (testeq)
    (testeqv)
    (testequal)
    (testif)
    (testcons))))
