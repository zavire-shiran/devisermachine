compilation is a caching operation
compilation is an optimization, since it is equivalent to interpreting

all software is distributed by code. there is *NO* support for loading binaries
  (except kernel, and that's weird)

modules are the atomic unit of completed compilations
  because it's big enough to do significant optimization on
    but small enough that it's not ridiculous
  most compilation steps are also cached
  perhaps you can tell that caching is big in this
  therefore, everything must be in a module
    this includes what gets input at the repl
  modules are dynamic
    can be editted on the fly
    can be saved to disk and restored
    can be re-initialized if the state gets ultra wonky

all stages of compilation can be inspected
  cached compilation steps are objects that can be inspected

porous access controls: nothing is forbidden, some things are recomended to not touch
  not just naming conventions, actual language level features that can be instrospected

all hardware must be exposed in the language
  most of it is memory-mapped, so not a big deal language-feature-wise
  specify a memory range, optionally a mapping of symbols to bit patterns (incl. subpatterns)

since our kernel will have to be pre-compiled, the gc will be in there
  which means our language has to have primitives for carving memory into values
    each local variable is a pointer (or other primitive type? int, etc?) on the stack    

if size is a factor, only explicitly sized types
  i.e. no generic "int", but bigint by default is ok

with complex enough syntax objects, any definition can show the full code path to recreate it
