compilation is a caching operation
compilation is an optimization, since it is equivalent to interpreting
all software is distributed by code. there is *NO* support for loading binaries (except kernel)
modules are the atomic unit of completed compilations
  most compilation steps are also cached
  perhaps you can tell that caching is big in this
  therefore, everything must be in a module
  should modules be implicit then? inferred from the structure of the code in the file system
all stages of compilation can be inspected
  cached compilation steps are objects that can be inspected

porous access controls: nothing is forbidden, some things are recomended to not touch
  not just naming conventions, actual language level features that can be instrospected

all hardware must be exposed in the language
  most of it is memory-mapped, so not a big deal language-feature-wise
  specify a memory range, optionally a mapping of symbols to bit patterns (incl. subpatterns)

since our kernel will have to be pre-compiled, the gc will be in there
  which means our language has to have primitives for carving memory into values

only explicitly sized types. i.e. no generic "int"
